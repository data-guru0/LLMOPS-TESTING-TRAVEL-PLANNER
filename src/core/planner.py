# Importing message classes to keep track of the chat history (what user and AI say)
from langchain_core.messages import HumanMessage, AIMessage

# Importing the function that generates the itinerary from the LLM
from src.chains.itinerary_chain import generate_itinerary

# Logger and CustomException are already integrated, skipping comments for them
from src.utils.logger import get_logger
from src.utils.custom_exception import CustomException

logger = get_logger(__name__)

# Defining the TravelPlanner class to handle city, interests, and itinerary generation
class TravelPlanner:
    def __init__(self):
        # Stores the conversation history (user and AI messages)
        self.messages = []
        
        # City name entered by the user
        self.city = ""
        
        # List of interests entered by the user
        self.interests = []
        
        # Final itinerary generated by the model
        self.itinerary = ""
        
        logger.info("Initialized TravelPlanner instance.")

    # Method to set the city name
    def set_city(self, city: str):
        try:
            # Save the city name
            self.city = city
            
            # Add the user's message to the conversation history
            self.messages.append(HumanMessage(content=city))
            
            logger.info(f"City set to: {city}")
        except Exception as e:
            logger.error("Error in set_city()")
            raise CustomException("Failed to set city", e)

    # Method to set the user's interests
    def set_interests(self, interests_str: str):
        try:
            # Convert comma-separated string to a list of interests
            self.interests = [i.strip() for i in interests_str.split(",")]
            
            # Add the interests as a message in the chat history
            self.messages.append(HumanMessage(content=interests_str))
            
            logger.info(f"Interests set to: {self.interests}")
        except Exception as e:
            logger.error("Error in set_interests()")
            raise CustomException("Failed to set interests", e)

    # Method to generate the itinerary using the LLM
    def create_itinerary(self):
        try:
            # Log the input before calling the model
            logger.info(f"Generating itinerary for {self.city} with interests: {self.interests}")
            
            # Call the function that sends the prompt to the LLM
            itinerary = generate_itinerary(self.city, self.interests)
            
            # Save the returned itinerary
            self.itinerary = itinerary
            
            # Add the model's reply to the message history
            self.messages.append(AIMessage(content=itinerary))
            
            logger.info("Itinerary successfully generated.")
            return itinerary
        except Exception as e:
            logger.error("Error in create_itinerary()")
            raise CustomException("Failed to generate itinerary", e)
